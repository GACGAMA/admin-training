#!/bin/bash
HOST=gat-0.training.galaxyproject.eu
#HOST=localhost
PORT=6789

gat_help(){ ## [User] submit help notice
	echo "$(hostname) help" > /dev/tcp/$HOST/$PORT
}

gat_done(){ ## [User] submit done notice
	echo "$(hostname) done" > /dev/tcp/$HOST/$PORT
}

gat_listen(){ ## [Admin] setup listening
	nc -l -p $PORT -k | ts '%s' > /tmp/training &
}

gat_overview() { ## [Admin] Overview of reports in last minutes (default=5)
	minutes=${1:-5}
	seconds=$((minutes * 60))
	tac /tmp/training | awk -v now=$(date +%s) '(now - $1 < '$seconds'){print $2" "$3}' | awk -F' ' '!_[$1]++'
}

search_dir() {
	q="$(find -name $1 -type d  2>/dev/null| wc -l)"
	if (( q > 0 )); then
		echo ✔
	else
		echo ✘
	fi
}

dir_exists() {
	if [[ -d "$1" ]]; then
		echo ✔
	else
		echo ✘
	fi
}

path_exists() {
	if [[ -f "$1" ]]; then
		echo ✔
	else
		echo ✘
	fi
}

str_exists() {
	location="${2:-*}"
	q="$(grep "$1" -Ri $location 2>/dev/null| wc -l)"
	if (( q > 0 )); then
		echo ✔
	else
		echo ✘
	fi
}

service_state() {
	q=$(timeout 3 systemctl status $1 2>/dev/null | grep Active | awk '{print $2}')
	if [[ "$q" == "" ]]; then
		echo ✘;
	else
		echo ✔;
	fi
}

db_exists() {
	q=$(timeout 3 sudo -u postgres psql -l 2>/dev/null| grep $1 | wc -l)
	if (( q > 0 )); then
		echo ✔;
	else
		echo ✘;
	fi
}
curl_responds() {
	q=$(timeout 3 curl --silent -k $1 2>/dev/null| wc -c)
	if (( q > 0 )); then
		echo ✔;
	else
		echo ✘;
	fi
}

gat_status-ansible() { # [Admin] Check status of ansible training
	step0=$(str_exists 'Copy a file to the' .)
	if [[ "$step0" == "✘" ]]; then
		# Maybe they typo'd it? Test the output file.
		step0=$(path_exists /tmp/test.txt)
	fi

	step1=$(str_exists '^server_name:')
	step2=$(search_dir geerlingguy.git)
	step3=$(search_dir secret_group_vars)
	echo "$(hostname)	basic $step0 template $step1 roles $step2 secrets $step3"
}

gat_status-galaxy() { # [Admin] Check status of ansible-galaxy training
	step0=$(service_state postgresql)
	step1=$(db_exists galaxy)
	step2=$(curl_responds http://localhost:8080/api/version)
	step3=$(service_state galaxy)
	step4=$(service_state nginx)
	step5=$(curl_responds https://localhost:443/api/version)

	echo "$(hostname)	postgres $step0 $step1 galaxy(http) $step2 SysD-gxy $step3 SysD-nginx $step4 galaxy(ssl) $step5"
}

gat_status-galaxy() { # [Admin] Check status of ansible-galaxy training
	step0=$(service_state postgresql)
	step1=$(db_exists galaxy)
	step2=$(curl_responds http://localhost:8080/api/version)
	step3=$(service_state galaxy)
	step4=$(service_state nginx)
	step5=$(curl_responds https://localhost:443/api/version)

	echo "$(hostname)	postgres $step0 $step1 galaxy(http) $step2 SysD-gxy $step3 SysD-nginx $step4 galaxy(ssl) $step5"
}

gat_status-cvmfs() { # [Admin] Check status of cvmfs training
	step0=$(search_dir galaxyproject.cvmfs)
	step1=$(dir_exists /cvmfs/)
	step2=$(str_exists /cvmfs/data.galaxyproject.org/managed/location/tool_data_table_conf.xml)

	echo "$(hostname)	reqs $step0 /cvmfs/ $step1 gxconf $step2"
}

gat_status-pulsar() { # [Admin] Check status of pulsar training
	step0=$(search_dir galaxyproject.pulsar)
	step1=$(str_exists private_token) # group var
	step2=$(str_exists libcurl4-openssl-dev)
	step3=$(str_exists PulsarRESTJobRunner)

	echo "$(hostname)	reqs $step0 groupvars $step1 playbook $step2 jobconf $step3"
}

usage() {
	echo "Galaxy Admin Training (gat) tool:"
	echo
	grep '^gat_.*()\s*{\s*# ' $0 | sed "s/gat_/  gat /g;s/().*#/\t/;"
	echo
	exit 1;
}

cmd="$1"; shift;
if [[ "$cmd" == "" ]]; then
	usage
else
	# Check that FN exists
	LC_ALL=C type "gat_$cmd" 2> /dev/null | grep -q 'function'
	ec=$?

	# If missing, exit with help
	if (( ec != 0 )); then
		echo "Unknown command!"
		usage
	fi

	gat_$cmd $@
fi
